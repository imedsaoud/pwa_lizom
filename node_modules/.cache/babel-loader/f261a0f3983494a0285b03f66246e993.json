{"remainingRequest":"/Users/pro/Desktop/pwa_lizom/node_modules/babel-loader/lib/index.js!/Users/pro/Desktop/pwa_lizom/node_modules/eslint-loader/index.js??ref--13-0!/Users/pro/Desktop/pwa_lizom/src/registerServiceWorker.js","dependencies":[{"path":"/Users/pro/Desktop/pwa_lizom/src/registerServiceWorker.js","mtime":1589889058724},{"path":"/Users/pro/Desktop/pwa_lizom/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pro/Desktop/pwa_lizom/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pro/Desktop/pwa_lizom/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqLwppbXBvcnQgeyByZWdpc3RlciB9IGZyb20gJ3JlZ2lzdGVyLXNlcnZpY2Utd29ya2VyJzsKCmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7CiAgcmVnaXN0ZXIoIiIuY29uY2F0KHByb2Nlc3MuZW52LkJBU0VfVVJMLCAic2VydmljZS13b3JrZXIuanMiKSwgewogICAgcmVhZHk6IGZ1bmN0aW9uIHJlYWR5KCkgewogICAgICBjb25zb2xlLmxvZygnQXBwIGlzIGJlaW5nIHNlcnZlZCBmcm9tIGNhY2hlIGJ5IGEgc2VydmljZSB3b3JrZXIuXG4nICsgJ0ZvciBtb3JlIGRldGFpbHMsIHZpc2l0IGh0dHBzOi8vZ29vLmdsL0FGc2txQicpOwogICAgICBOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0ID09PSAiZ3JhbnRlZCIpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdub3RpZmljYXRpb24gYWNjZXB0ZXInKTsgLy8gY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgc2VydmljZVdvcmtlci5wdXNoTWFuYWdlci5zdWJzY3JpYmUoeyB1c2VyVmlzaWJsZU9ubHk6IHRydWUsIGFwcGxpY2F0aW9uU2VydmVyS2V5OiB1cmxCYXNlNjRUb1VpbnQ4QXJyYXkod2luZG93LnB1YmxpY0tleSkgfSk7CiAgICAgICAgICAvLyBsZXQga2V5cyA9IHN1YnNjcmlwdGlvbi50b0pTT04oKS5rZXlzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm90aWZpY2F0aW9uIHJlZnVzZScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgcmVnaXN0ZXJlZDogZnVuY3Rpb24gcmVnaXN0ZXJlZCgpIHsKICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2Ugd29ya2VyIGhhcyBiZWVuIHJlZ2lzdGVyZWQuJyk7CiAgICB9LAogICAgY2FjaGVkOiBmdW5jdGlvbiBjYWNoZWQoKSB7CiAgICAgIGNvbnNvbGUubG9nKCdDb250ZW50IGhhcyBiZWVuIGNhY2hlZCBmb3Igb2ZmbGluZSB1c2UuJyk7CiAgICB9LAogICAgdXBkYXRlZm91bmQ6IGZ1bmN0aW9uIHVwZGF0ZWZvdW5kKCkgewogICAgICBjb25zb2xlLmxvZygnTmV3IGNvbnRlbnQgaXMgZG93bmxvYWRpbmcuJyk7CiAgICB9LAogICAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCgpIHsKICAgICAgY29uc29sZS5sb2coJ05ldyBjb250ZW50IGlzIGF2YWlsYWJsZTsgcGxlYXNlIHJlZnJlc2guJyk7CiAgICB9LAogICAgb2ZmbGluZTogZnVuY3Rpb24gb2ZmbGluZSgpIHsKICAgICAgY29uc29sZS5sb2coJ05vIGludGVybmV0IGNvbm5lY3Rpb24gZm91bmQuIEFwcCBpcyBydW5uaW5nIGluIG9mZmxpbmUgbW9kZS4nKTsKICAgIH0sCiAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoX2Vycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyBzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb246JywgX2Vycm9yKTsKICAgIH0KICB9KTsKfQ=="},{"version":3,"sources":["/Users/pro/Desktop/pwa_lizom/src/registerServiceWorker.js"],"names":["register","process","env","NODE_ENV","BASE_URL","ready","console","log","Notification","requestPermission","then","result","registered","cached","updatefound","updated","offline","error"],"mappings":"AAAA;AAEA,SAASA,QAAT,QAAyB,yBAAzB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,QAAQ,WAAIC,OAAO,CAACC,GAAR,CAAYE,QAAhB,wBAA6C;AACnDC,IAAAA,KADmD,mBAC1C;AACPC,MAAAA,OAAO,CAACC,GAAR,CACE,0DACA,+CAFF;AAKAC,MAAAA,YAAY,CAACC,iBAAb,GAAiCC,IAAjC,CAAsC,UAACC,MAAD,EAAY;AAChD,YAAGA,MAAM,KAAK,SAAd,EAAyB;AACvBL,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADuB,CAEvB;AACA;AACD,SAJD,MAKK;AACHD,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,OATD;AAUD,KAjBkD;AAkBnDK,IAAAA,UAlBmD,wBAkBrC;AACZN,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD,KApBkD;AAqBnDM,IAAAA,MArBmD,oBAqBzC;AACRP,MAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACD,KAvBkD;AAwBnDO,IAAAA,WAxBmD,yBAwBpC;AACbR,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,KA1BkD;AA2BnDQ,IAAAA,OA3BmD,qBA2BxC;AACTT,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,KA7BkD;AA8BnDS,IAAAA,OA9BmD,qBA8BxC;AACTV,MAAAA,OAAO,CAACC,GAAR,CAAY,+DAAZ;AACD,KAhCkD;AAiCnDU,IAAAA,KAjCmD,iBAiC5CA,MAjC4C,EAiCrC;AACZX,MAAAA,OAAO,CAACW,KAAR,CAAc,2CAAd,EAA2DA,MAA3D;AACD;AAnCkD,GAA7C,CAAR;AAqCD","sourcesContent":["/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n\n      Notification.requestPermission().then((result) => {\n        if(result === \"granted\") {\n          console.log('notification accepter')\n          // const subscription = await serviceWorker.pushManager.subscribe({ userVisibleOnly: true, applicationServerKey: urlBase64ToUint8Array(window.publicKey) });\n          // let keys = subscription.toJSON().keys;\n        }\n        else {\n          console.log('notification refuse')\n        }\n      })\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n"]}]}